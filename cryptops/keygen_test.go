////////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2018 Privategrity Corporation                                   /
//                                                                             /
// All rights reserved.                                                        /
////////////////////////////////////////////////////////////////////////////////

package cryptops

import (
	"gitlab.com/elixxir/crypto/cyclic"
	"gitlab.com/elixxir/server/cryptops/realtime"
	"gitlab.com/elixxir/server/globals"
	"gitlab.com/elixxir/server/services"
	"strconv"
	"testing"
)

func TestGenerateClientKey(t *testing.T) {
	batchSize := uint64(3)
	round := globals.NewRound(batchSize)
	globals.Users = globals.NewUserRegistry("cmix", "",
		"cmix_server", "")

	rng := cyclic.NewRandom(cyclic.NewInt(2), cyclic.NewInt(1000))

	// This prime is 4096 bits
	prime := cyclic.NewIntFromString(
		"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1"+
			"29024E088A67CC74020BBEA63B139B22514A08798E3404DD"+
			"EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245"+
			"E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED"+
			"EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D"+
			"C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F"+
			"83655D23DCA3AD961C62F356208552BB9ED529077096966D"+
			"670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B"+
			"E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9"+
			"DE2BCBF6955817183995497CEA956AE515D2261898FA0510"+
			"15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64"+
			"ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7"+
			"ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B"+
			"F12FFA06D98A0864D87602733EC86A64521F2B18177B200C"+
			"BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31"+
			"43DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D7"+
			"88719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA"+
			"2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6"+
			"287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED"+
			"1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA9"+
			"93B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199"+
			"FFFFFFFFFFFFFFFF", 16)

	group := cyclic.NewGroup(prime, cyclic.NewInt(55), cyclic.NewInt(33), rng)

	face := make([]interface{}, 2)

	face[0] = round
	face[1] = RECEPTION

	dc := services.DispatchCryptop(&group, GenerateClientKey{}, nil, nil,
		face)

	// Create user registry, where Run() gets its pair of keys.
	var users []*globals.User
	// Make 1 more user than batchSize so that userID and slotID aren't the
	// same. This should ensure that userID is used where it should be and
	// slotID is used where it should be.
	for i := uint64(0); i < batchSize+1; i++ {
		userAddress := strconv.FormatUint(i, 10)
		users = append(users, globals.Users.NewUser(userAddress))
	}

	users[1].Reception.BaseKey = cyclic.NewIntFromString(
		"da9f8137821987b978164932015c105263ae769310269b510937c190768e2930",
		16)
	users[2].Reception.BaseKey = cyclic.NewIntFromString(
		"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
		16)
	users[3].Reception.BaseKey = cyclic.NewIntFromString(
		"ef9ab83927cd2349f98b1237819909002b897231ae9c927d1792ea0879287ea3",
		16)

	for i := 0; i < len(users); i++ {
		globals.Users.UpsertUser(users[i])
	}

	var inSlots []services.Slot
	for i := uint64(0); i < batchSize; i++ {
		inSlots = append(inSlots, &realtime.Slot{
			Slot:       i,
			CurrentID:  users[i+1].ID,
			CurrentKey: cyclic.NewInt(1),
			Salt: cyclic.NewIntFromString(
				"C0DED00DC0DED00DC0DED00DC0DED00DC0DED00DC0DED00DC0DED00DC0DED00D",
				16).Bytes(),
		})
	}

	// These expected keys were generated by the test
	expectedSharedKeys := []*cyclic.Int{
		cyclic.NewIntFromString("aeb9159e0b579bd5a5fd298a825d38358d11004cd3c0eb8925a8a637cba7fbb2968f917841d57e8addecfec7d0b5aacc4966b8ae9f8acee832d4d3185a863ff2b361e18becd5a9bf094cf968ad774269f8f895b4b98d5c3894803603bcec3bf7a0867f38700b13dc936c53adaeac35c96f6350d2951f5110a80f9a2e11c0a9aa9b634e47af7ad00c419ec8185284ae003b12a5dbd58b21f76810a114556660e4ab5d741c1b452b51f6e72b618f43c4555e06af2e90ce2df6ec1ba9329aa8f1fcc4c5879575d5a669d483b1099c83264a58e0d4ccd729ee11e86677c249d4c6233794b6f2f93b906ed335c11253a1ef29a327ada86f9721e7a5dd1fbfc54017151262d6ac04d820156c7b2945a8b2e3953906c083ceaca3a5a4ec986bcdba2c7342a3c7b2f70b3ee66bd578561614967f32949bc96859be3216e23ca7bba64dc27ca1757c6d5b2bfdc42a2f2b903fabf41479187de862155586a6aebfb11aeddef6987fd5a1bb3bdf8dc7e24d2c1ea38f49f637c5e0af85f34d90ed33218354fe9431fed9a7e2b3639eb48ae277c433c85f5558c11365c25652d01bdc1644e322bc4a4f0905ba03bf6d865e28a7fa6bf044aa3e2c0048ddf5d700dbaf651a10e3f7bd2f7b276a79919baa4e8b6f4c20d4f8ea1d03c27feaa492f1ee9f7f56d7574cf5c411d089212e54b5bdde245ff14b6b38ed7b9289627427610ea971d0dca2",
			16),
		cyclic.NewIntFromString("374465c88791f205a7cabd5b6c7fa248e4a3c550ab3ef5f27da1988f45a41561aff49d767c0251da5c92741bcbfc8f32d5d6d62c3888716aa5a306973576e6506c2b257cf0daccce40a48f3203e43b73c93eaab00786d00328907c265a0db0a44b094c76f98d8945088816505b79e86a864c6e369387ea280a0ac3ae55a5eeae6d124300d02aed97671500d1837fc30e16d2f42fa88dab3426751d22adc174b4890375e4df691dae04b900cf0121db82f31cf1ee413374abcead93c56a4516746c7af346fc816b66237140f29a8cce179c110e8ebf4db932695c1399d245c70bab5edafc567ed6240a4f93aa25525c765dc58d8221f03ce8e4ca3fd2651e8237536e55c919d707c80619bd761adabe2889d13c76a825e27721f64e80d8cc21158a64d2f9cdc1515b4c9c399137ef0f6e6615456a50fe84d3f69bdb235d6e2a01bfdd75acc286b65b8332db3a2b0678cc38095afbd2741692af22f42791a8c7d06cd808faafae95396f8c0281f0dc0ebc52fc15d3136e671fb3812ffbc8d82f445667f0b01e389ec8e2a1ca5c75b219a197b49ca3c54050ab0d91d0d772783e1aa9b02dac14c3f01a9f02b1d138b99dc0cd252dde5cc45a8d762ec81a6b7f939a969f2373619263cf2e751d3e62aeab2d7801008444e2cf75814aefccc9d7739cd400f245bb51be1f5f85711358899caa64152c4ef47c584758a065a013e56fbb",
			16),
		cyclic.NewIntFromString("963608f8eaa4ac4e48734e7703fa882bcc8fe8a9930058b933b3d5885024613c49f8848f20aa33ecee4b22dff068ca9ca8e2aa34dbaa38db8570761164d3348e8ee24a511aa3028b5955357e0c2c496e6bf7b82d1f21095ca235e787b4862f8bcb686ba46bcd0451cfe93971f903ce3575010daca47adcd679f985d2de0abb9f48f065a4c0a3ddc8a16f16210e922335ac47fc9818405d0a66179f9ce1c394b9b261a729545f51f3e2754a67a8a2e0e125515c158289c5bf7016a1b371cd5ec6b6e28d3734cc5d2aca38c11aaee152851b72d18e05d654a9b92d52e1cf07790944c2f93cfec3dc991cccee8b848398bc9cde167c63d2263af37ee57e6ba34dae20169260b6e6d52bc877c5a67199fe6cb0f3872f77a7d5959d410e1dca5a5373b9150f2707cf2df611e4ad0ae9b7ebf807f4cdf144d85c40b44061d80e6f6871aa2b88e8734e2ad97c37565835a4298541283b0cb3365db23895456d8efa15149b16b673ae416bd4b3d0638c5de03bcd0bbd29a0dbcd01c49bdd86cda2ae58874c02b43e2fcf8da495d854b98a0287ad9edc85880e21b4df20f99eb148dec9eb31e1301d6fee7d52cafb9ee54b7ec85422f8ee231089fb04975cb149311d23a5c7b4fae4c252fed1e7c9e20a187572e51e0363cbdc1205efa48cd33a96e037495ffdf60280eec7b1ddd38a4ceb162dc035a54242269d1cf7c1e9f2700a0f955e",
			16)}

	// Do the test
	for i := uint64(0); i < batchSize; i++ {
		dc.InChannel <- &(inSlots[i])
		actual := (*<-dc.OutChannel).(*realtime.Slot)
		if actual.CurrentKey.Cmp(expectedSharedKeys[i]) != 0 {
			t.Errorf("Shared keys differed at index %d. Expected %s, "+
				"got %s", i, expectedSharedKeys[i].Text(10),
				actual.CurrentKey.TextVerbose(16, 0))
		}
	}
	// Clean up user registry
	for i := 0; i < len(users); i++ {
		globals.Users.DeleteUser(users[i].ID)
	}
}
