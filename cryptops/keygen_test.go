////////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2018 Privategrity Corporation                                   /
//                                                                             /
// All rights reserved.                                                        /
////////////////////////////////////////////////////////////////////////////////

package cryptops

import (
	"gitlab.com/elixxir/crypto/cyclic"
	"gitlab.com/elixxir/crypto/large"
	"gitlab.com/elixxir/server/cryptops/realtime"
	"gitlab.com/elixxir/server/globals"
	"gitlab.com/elixxir/server/services"
	"testing"
)

func TestGenerateClientKey(t *testing.T) {
	globals.Users = globals.NewUserRegistry("cmix", "",
		"cmix_server", "")

	// This prime is 4096 bits
	prime := large.NewIntFromString(
		"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1"+
			"29024E088A67CC74020BBEA63B139B22514A08798E3404DD"+
			"EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245"+
			"E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED"+
			"EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D"+
			"C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F"+
			"83655D23DCA3AD961C62F356208552BB9ED529077096966D"+
			"670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B"+
			"E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9"+
			"DE2BCBF6955817183995497CEA956AE515D2261898FA0510"+
			"15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64"+
			"ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7"+
			"ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B"+
			"F12FFA06D98A0864D87602733EC86A64521F2B18177B200C"+
			"BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31"+
			"43DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D7"+
			"88719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA"+
			"2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6"+
			"287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED"+
			"1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA9"+
			"93B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199"+
			"FFFFFFFFFFFFFFFF", 16)

	grp := cyclic.NewGroup(prime, large.NewInt(55), large.NewInt(33))

	batchSize := uint64(3)
	round := globals.NewRound(batchSize, grp)

	face := make([]interface{}, 2)

	face[0] = round
	face[1] = RECEPTION

	dc := services.DispatchCryptop(grp, GenerateClientKey{}, nil, nil,
		face)

	// Create user registry, where Run() gets its pair of keys.
	var users []*globals.User
	// Make 1 more user than batchSize so that userID and slotID aren't the
	// same. This should ensure that userID is used where it should be and
	// slotID is used where it should be.
	for i := uint64(0); i < batchSize+1; i++ {
		users = append(users, globals.Users.NewUser(grp))
	}

	users[1].Reception.BaseKey = grp.NewIntFromString(
		"da9f8137821987b978164932015c105263ae769310269b510937c190768e2930",
		16)
	users[2].Reception.BaseKey = grp.NewIntFromString(
		"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
		16)
	users[3].Reception.BaseKey = grp.NewIntFromString(
		"ef9ab83927cd2349f98b1237819909002b897231ae9c927d1792ea0879287ea3",
		16)

	for i := 0; i < len(users); i++ {
		globals.Users.UpsertUser(users[i])
	}

	var inSlots []services.Slot
	for i := uint64(0); i < batchSize; i++ {
		inSlots = append(inSlots, &realtime.Slot{
			Slot:       i,
			CurrentID:  users[i+1].ID,
			CurrentKey: grp.NewInt(1),
			Salt: grp.NewIntFromString(
				"C0DED00DC0DED00DC0DED00DC0DED00DC0DED00DC0DED00DC0DED00DC0DED00D",
				16).Bytes(),
		})
	}

	// These expected keys were generated by the test
	expectedSharedKeys := []*cyclic.Int{
		grp.NewIntFromString("2333376b488c0568a60fd0b4f50dcc32c5559af9f3539b1fff2e86a2dbeddde0"+
			"92138c25113ea07a54cb0c6531f7af95ba1eeca84903dbce8ba8c1d3d84e1552"+
			"23b5d710d29c5f9877686d4fc95e1f7274729f762718b2a04a192a5902a3243c"+
			"ebed855f6fe31ddd163690680a91d55c44e49fa17989461af8a4dc8da7a3fdec"+
			"70a24107fd9ea6ddcfb6938594dfb18b2506665baa9e496708bf75cb46b9cf93"+
			"5db3b485b9abd078c62ad420497de5377781302f4fff2dbf1dcfe2fb8146784e"+
			"3ab2dbd66fa6054682014a66f3e672afcabbde0d967d09a9b946c5116d3e9148"+
			"3e1360c03c07b3b30be0a1130ca41671ac6f2c413d5a9d0146f3d590f2d1c1c0"+
			"f1964d2f570a3cb66b6647e9e4eeed58bbabf2b09ebf3a8de987fc1d7dd14343"+
			"494173dde939685d752a3bba15c3ebed6659d2c93b956b0db9a01bb39482a1c5"+
			"f51e821300ec69e74888ced22d8e49acb1d16addc5d2626093ee6d51251f862d"+
			"fb17df6437a4afc8fed0ab333544584f63ce9f0a0160a83a0f2c59823de2164e"+
			"172e63cd42d00f61ddcf76f338d2bb238a75bc1e53d0c874de7ae90cca0fdfdf"+
			"a60ab3070b7b1ade1b82cff6cf38f4568270e6fe14c4f8eaa714041151e72096"+
			"d6ea483814275413f57f48402e9838e90d63b6aaea09668e4723f3aae9901794"+
			"1176832f74ed235dfbba6659b1702cfa8c5d8b54ffc0f949ca7caff2621248f3",
			16),
		grp.NewIntFromString("dd8260bf52ac82e8fced989e2433eaa002f0d59555f5de4244160e34f0ca2603"+
			"a5955443c7e8fec4e11ca47d6753907bea79c2d9cf8a02c2b25cc12c1a854eff"+
			"8df3925cb395fb0505455e302e6dcf2730ce80c19c971c1220ffd5448b2a9997"+
			"8945119fc4054f73a1cce9fd67256d2644055f1a3ececd5eb98cfcd86c5c499a"+
			"09da2b9674c46991f97005d638445b092662ed5fb3169fe6c3d59209c2091cf2"+
			"2cae34d4061612c9729b8dbd96418d52280c1c1840c87632b3dcb988762cdd07"+
			"3cc7d29a770e638886201655159638c84e5df31b0039f3415a7852ac225c9834"+
			"8923ff36028c5eaf4c64372d35d4cc59c7d98201e92b1949415e1dcd5848e793"+
			"a25adca88e6ca607655b629e76351ffea1e58cf1e958230cea203c37c25bc866"+
			"f84c149963028bb966c4d297ae06e3b8017c5ac2b9ad7171adbb13ade56fd1f9"+
			"78aded5d5b7e2dbafc51945cc8a08165ec1e009b3048a9c05677970fc7f4ce79"+
			"b64664116b01d95268e445a17ee652db30b4aa7caaa40e03867e11e34fd2206c"+
			"bf6eb6a7f1c322698a75df6cf940289541de3debcabf6de7259874ab2005227f"+
			"5f044c3fc8b3387ccac6ed65f4e79619d3a42297cc4c0f1ac66f01dbf2ba246d"+
			"4b035cb1227a85b97f355b8453863a70cf1793fda579311379f58ef789063ab8"+
			"92804165f73b7fc229118dcbcefef9ca71eade1a0423f7628ec5da83ed30e9be",
			16),
		grp.NewIntFromString("c8d8c205460cb506fc56054fc865c32f60b78a1869863eff9ecf8a264b26f852"+
			"7d295224f51367f2ff362ef6b4a6dbab1f30833ebf5f2a4ed7f96810108bfebc"+
			"d3d4135f3e3cd1cab9946d30d46230bfba6f7bbd3769cd5c9036fd587e5a64a8"+
			"3d47ec3ab3ca50184ac7f0c604bed292e6f8bce736c0b41c30134936de78e4b0"+
			"35294897cc89d726ea7b09136cfab215a2bc90abbae07dff9360787caa8f2b38"+
			"7e088ea093fbf5805e5141b42451e0b8208413e7d390fb59e8e4e9affabe12ab"+
			"2b48fd08c55e6201a603a5508839418410bc6692033806f7603bdb2b9a702f0f"+
			"56ab80e2f99ffd2cfa96300d8aa349818a46561836ad0a1697ffcf31fe8fd710"+
			"0b45192025712175bb80613e8e83136fa08e99262d8ab54ddd7452fe7977223e"+
			"3ebaf316513e91ed9f75399a03d6d6e6f6a0e9107f77cfcbd015fd268734643f"+
			"9232be694a7967c13e0cb6499cfcecbebee7613f8db9a86f4272ba5a2211cb99"+
			"f41340b48e9b164e1d189b6627c3183e5cd27b7f41f7a6077d480386b2d8417a"+
			"36a4780bff48da34b9d7cb6274bceb2e7c133e6790bfc850a2091377ddc5cef2"+
			"ba14a225e6f19ec7c4b621190999b6730efa8a28c931353849612e07759ccd2e"+
			"5429ee183f92d03f8e001687ac95f698b6dac92457709dafef6f678e014f707b"+
			"17dd9bcaf2608ea8873f6b4745e12e1904fde6057bb1922cdc2e486e206aa9d4",
			16)}

	// Do the test
	for i := uint64(0); i < batchSize; i++ {
		dc.InChannel <- &(inSlots[i])
		actual := (*<-dc.OutChannel).(*realtime.Slot)
		if actual.CurrentKey.Cmp(expectedSharedKeys[i]) != 0 {
			t.Errorf("Shared keys differed at index %d. Expected %s, "+
				"got %s", i, expectedSharedKeys[i].Text(16),
				actual.CurrentKey.TextVerbose(16, 0))
		}
	}
	// Clean up user registry
	for i := 0; i < len(users); i++ {
		globals.Users.DeleteUser(users[i].ID)
	}
}
