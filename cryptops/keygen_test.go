////////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2018 Privategrity Corporation                                   /
//                                                                             /
// All rights reserved.                                                        /
////////////////////////////////////////////////////////////////////////////////

package cryptops

import (
	"gitlab.com/elixxir/crypto/cyclic"
	"gitlab.com/elixxir/server/cryptops/realtime"
	"gitlab.com/elixxir/server/globals"
	"gitlab.com/elixxir/server/services"
	"testing"
)

func TestGenerateClientKey(t *testing.T) {
	batchSize := uint64(3)
	round := globals.NewRound(batchSize)
	globals.Users = globals.NewUserRegistry("cmix", "",
		"cmix_server", "")

	rng := cyclic.NewRandom(cyclic.NewInt(2), cyclic.NewInt(1000))

	// This prime is 4096 bits
	prime := cyclic.NewIntFromString(
		"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1"+
			"29024E088A67CC74020BBEA63B139B22514A08798E3404DD"+
			"EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245"+
			"E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED"+
			"EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D"+
			"C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F"+
			"83655D23DCA3AD961C62F356208552BB9ED529077096966D"+
			"670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B"+
			"E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9"+
			"DE2BCBF6955817183995497CEA956AE515D2261898FA0510"+
			"15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64"+
			"ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7"+
			"ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B"+
			"F12FFA06D98A0864D87602733EC86A64521F2B18177B200C"+
			"BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31"+
			"43DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D7"+
			"88719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA"+
			"2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6"+
			"287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED"+
			"1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA9"+
			"93B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199"+
			"FFFFFFFFFFFFFFFF", 16)

	group := cyclic.NewGroup(prime, cyclic.NewInt(55), cyclic.NewInt(33), rng)

	face := make([]interface{}, 2)

	face[0] = round
	face[1] = RECEPTION

	dc := services.DispatchCryptop(&group, GenerateClientKey{}, nil, nil,
		face)

	// Create user registry, where Run() gets its pair of keys.
	var users []*globals.User
	// Make 1 more user than batchSize so that userID and slotID aren't the
	// same. This should ensure that userID is used where it should be and
	// slotID is used where it should be.
	for i := uint64(0); i < batchSize+1; i++ {
		users = append(users, globals.Users.NewUser())
	}

	users[1].Reception.BaseKey = cyclic.NewIntFromString(
		"da9f8137821987b978164932015c105263ae769310269b510937c190768e2930",
		16)
	users[2].Reception.BaseKey = cyclic.NewIntFromString(
		"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
		16)
	users[3].Reception.BaseKey = cyclic.NewIntFromString(
		"ef9ab83927cd2349f98b1237819909002b897231ae9c927d1792ea0879287ea3",
		16)

	for i := 0; i < len(users); i++ {
		globals.Users.UpsertUser(users[i])
	}

	var inSlots []services.Slot
	for i := uint64(0); i < batchSize; i++ {
		inSlots = append(inSlots, &realtime.Slot{
			Slot:       i,
			CurrentID:  users[i+1].ID,
			CurrentKey: cyclic.NewInt(1),
			Salt: cyclic.NewIntFromString(
				"C0DED00DC0DED00DC0DED00DC0DED00DC0DED00DC0DED00DC0DED00DC0DED00D",
				16).Bytes(),
		})
	}

	// These expected keys were generated by the test
	expectedSharedKeys := []*cyclic.Int{
		cyclic.NewIntFromString("7407d7b50bdca5be0ff205a0e798b1fb001f7944dd3b2f3b29bcb1f5fb3a91bf42929e749d5bd3d6861f421e39c0bffbb594323206da42c52daf8de8b9800c78c12350d447ac15fa85445af248ebc94f300fadfdc83880cf9a8cde5dc9da2ca8c839e7bf3e3e08d1b0863a15bb4c62b4a95ba436ed627025a774b8d0396bf06dc20095a0a62867c6da84f57db077ef0d3388b7a9f141d91c46b2cbeab8ed61c6a856cedf5c7f3468cd054a8b4f006a52c3ed090842931056c9c87bd4361c6f54b05a57d2cf38d21f8c15655b26987297e40019350828cdeaed46bfabbc2ddce71e61f2195b2fe7e49c6a0ddd1c6223651059867e101298bdd165ce54f903b3f32ada5f34c1d30489df4a55d0826eb903425377fbe7b57a45a1392af80a48355c6ce088a488dd821674bc7d5a7354949b58276fdd9f4c21c11261fc117763ddc883e7bccb70ac42e1e319ed169d15d6f648006d1d083048dd89d6e83b405b994ce5cef725acadb956e88d306b0d7cc84387eb2e0247209a3f7bd824255ea1549e8a2f1ee9fea3d1487bcfa1ca13fbf20a0cba7057949f641f8c5fb7ed1c22eb402931d1817de55353ed3a1fa95568396a404183ca7e6b6cb732ba033794778953ca4d9ed7a3b4ed85fa62f185d86ece32f98b5e0e0ff6f2ff1ee1a9c7d003f7586af44986849b7bcf6facf6218562bb79afac786ed6b3bb646798a37e6a0c3786",
			16),
		cyclic.NewIntFromString("4ea50dd855af88026ea56cb180d33de0a7a4c3902df9db15130c78d2eae3bf50428bde209249335ae2ccec9fe605febe2a7ce304ed9646ed54da8b8c3e43144ad793cc78c7cfe5a7e429a1b956e0d101e687880f0f4b127ca360b2298f8e2023432c9adf280c0b042d2633f0c73a58b90a79c7a37e8dfff4e5efa5394e5d5546454417280e0741ef003e5b42e26d320065e9d9d3e1d1a7992c17df00158d5689afd385a357866896a1b77ffd610ac0498c4c53cb53e252dce662ae90594b4636d1ff0fe3aaa24f56ccc39b1962ed2c195e609c887899a4e9a91453636dedc7e3fedbf8dd4e324fea3ff70509f252f8fc805495a81ddac68aa80c5472dcac9865e4e889b5985b158e9d2eb2808b952594dfa9ae50e6f581510725d2ad4f9da2e1895e078614dfad917cbf7d78307c4eeac81d862b4ad866d9b3d2f76de49edd33905f397d626ed9d02b1909628d404e8224179142ad9d6a64b8ac2fcc425ca54fb779079f32e5973b735d729724f203bedb043f184d11ce2e0d9f5b620a55069bbab3ed5fbf740478994813ad19657203551faf546d663f04eec8d02d58bf35c0a0d693f69fdeb55f54d87a3c03235760b6690bf5e10b1a1b06e6d1042faca5a129a986f2412cfe48c068dbb61657d5a846cd1cbaf0108125e68a505a4909c3f9c2b39a2a6a85b8697e3015852159750a8291740db5744a2510eaf4bc12b431d",
			16),
		cyclic.NewIntFromString("fcd590a8a41928baf98a733a6137a1a70445ab361cad856b7b75ea96becf19e241d44dc1c1522fa7294682cb71ce97f3a08351005ca055aabfeb982cd2fa126adcfa70b94b7592669fdddb7392737982214e5a2f3daaca7c02da26504d446c5a55f0eb3413fb6ab933b8578fcf0230cac6bec2f5c8b002475c0ea5a26fdead8f7a72de9683164f345adaf82383e81629d560896cf20c25493eb088af6e8037c183ef410354ac03e2d6412614a2b9222656e29bbaaa23a684019b0f49fbef36c1eab9503cb47227e3a4cd4e97404351bd45f992e459673b50eb8b7895c75b74a306024086a0ffe65cce2c218bfa3479ccf20bece5f6cd3d43efed807fc2a7d8fc2a3368bedaea7da9b68568cc57db370b00c44ce003bb514951a59b7f618299039f839258e620b6a0bebf87381d159dda6085287863dc79957d322e3171cc77f937099b035ca91852b34f6f73da84368b630b8dde0b55fc25125f668527f0c2c283165d0ff464c3ed76f1c2d24c05cabbdb539f14afc5d5f02d63cfa37ffa751465f5a20149a9339e90786a883d3101747ac534f3d5c355045f6411039895e3c366b3641634a759815e2a6d8d22435184fb0e75263fe125f52cc53e1311ae4a06059bd05dd4fdb6296d5d83d58503c746713eb3f1165febb643f4c50ef17b545f5dc56e492f7c11483e3c92f62619428571681cc0fc1729233d96d3bf16517e40",
			16)}

	// Do the test
	for i := uint64(0); i < batchSize; i++ {
		dc.InChannel <- &(inSlots[i])
		actual := (*<-dc.OutChannel).(*realtime.Slot)
		if actual.CurrentKey.Cmp(expectedSharedKeys[i]) != 0 {
			t.Errorf("Shared keys differed at index %d. Expected %s, "+
				"got %s", i, expectedSharedKeys[i].Text(16),
				actual.CurrentKey.TextVerbose(16, 0))
		}
	}
	// Clean up user registry
	for i := 0; i < len(users); i++ {
		globals.Users.DeleteUser(users[i].ID)
	}
}
